//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using TemplateAction.Label.StructLib;

namespace TemplateAction.Label.Token
{
    /// <summary>
    /// 结构标记
    /// </summary>
    public class StructToken : BaseToken
    {
        public const string BEGIN_FUN = "@";
        public const string SECTION_L = "{";
        public const string SECTION_R = "}";
        public const string FUN_PARAM_L = "(";
        public const string FUN_PARAM_R = ")";
        public const string FUN_PARAM_M = ",";
        public const string BEGIN_START = "<m:";
        public const string END_START = "</m:";
        public const string END_FINISH = ">";
        public const string LESS = "<";
        public const string END_START_FINISH = "/>";
        public const string EQUAL = "=";
        public const string TOKEN_TYPE = "Struct";
        public const string ADD = "+";
        public const string SUB = "-";
        public const string MUL = "*";
        public const string DIV = "/";
        public const string MOD = "%";
        public const string NE = "!";
        public const string OR = "||";
        public const string AND = "&&";
        public const string LEQ = "<=";
        public const string GEQ = ">=";
        public const string NEQ = "!=";
        public const string EEQ = "==";
        public const string LM = "[";
        public const string RM = "]";
        public const string LINK = ".";
        public const string Q = "?";
        public const string COLON = ":";
        public override object GetValue()
        {
            throw new Exception("此标记非值类型标记!");
        }
        public static bool IsStruct(char c)
        {
            return StructWords.Instance.IsStruct(c);
        }
        private ItemTree _curitem;
 
        public StructToken(string val) : base(val)
        {
            if (val.Length == 1)
            {
                StructWords.Instance.TryGetValue(val[0], out _curitem);
            }
        }
        public override bool Append(char value)
        {
            if (_curitem != null)
            {
                bool isend = _curitem.IsEnd;
                if (_curitem.Child == null)
                {
                    if (!isend)
                    {
                        mValue = string.Empty;
                        mToken = string.Empty;
                    }
                    return false;
                }
                if (_curitem.Child.TryGetValue(value, out _curitem))
                {
                    mValue += value;
                    mToken = mValue;
                    return true;
                }
                else
                {
                    if (!isend)
                    {
                        mValue = string.Empty;
                        mToken = string.Empty;
                    }
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        public override string Type
        {
            get { return TOKEN_TYPE; }
        }
    }

}